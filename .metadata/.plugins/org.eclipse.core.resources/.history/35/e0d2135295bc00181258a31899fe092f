package com.leo.bos.web.action;

import java.io.IOException;

import org.apache.struts2.ServletActionContext;
import org.hibernate.criterion.DetachedCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.leo.bos.domain.BcStaff;
import com.leo.bos.service.IStaffService;
import com.leo.bos.utils.PageBean;
import com.leo.bos.web.action.base.BaseAction;

import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

/**
 * 取派员管理
 * @author leoi555
 *
 */
@Controller
@Scope("prototype")
public class StaffAction extends BaseAction<BcStaff> {
	//属性驱动
	private int page;
	private int rows;
	/**
	 * @return the page
	 */
	public int getPage() {
		return page;
	}
	/**
	 * @param page the page to set
	 */
	public void setPage(int page) {
		this.page = page;
	}
	public int getRows() {
		return rows;
	}
	public void setRows(int rows) {
		this.rows = rows;
	}

	@Autowired
	private IStaffService staffService;
	/**
	 * 添加取派员
	 * @return
	 */
	public String add() {
		staffService.addStaff(model);
		System.out.println(model.getId());
		return "list";
		
	}
	/**
	 * 分页查询通过写回json给前台用
	 * @return
	 */
	public String pageQuery() {
		PageBean  pageBean=new PageBean();
		pageBean.setCurrentPage(page);
		pageBean.setPageSize(rows);
		//创建离线查询对象
		DetachedCriteria sCriteria=DetachedCriteria.forClass(BcStaff.class);
		pageBean.setDetachedCriteria(sCriteria);
		staffService.pageQuery(pageBean);
		//将pagebean转换为json通过输出流写会到前台
		//jsonObject---将单一的对象转为json
		//jsonArray---将数组或集合转为json
		//去掉多于的属性
		JsonConfig jsonConfig=new JsonConfig();
		//指定哪些不需要转json
		jsonConfig.setExcludes(new String[] {"currentPage","detachedCriteria","pageSize"});
		String json=JSONObject.fromObject(pageBean).toString();
		//写回到前台
		try {
			ServletActionContext.getResponse().setContentType("text/json;charset=UTF-8");
			ServletActionContext.getResponse().getWriter().write(json);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return NONE;
		
	}
	
}
