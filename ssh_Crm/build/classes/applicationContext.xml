<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:soap="http://cxf.apache.org/bindings/soap"
	xmlns:beans="http://cxf.apache.org/configuration/beans"
	xsi:schemaLocation="http://cxf.apache.org/configuration/beans http://cxf.apache.org/schemas/configuration/cxf-beans.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://cxf.apache.org/bindings/soap">
<!-- 指定spring读取db.properties配置 -->
<context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
<!-- 1.将连接池交给Spring管理 -->
<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
	<property name="jdbcUrl" value="${jdbc.jdbcUrl}" ></property>
	<property name="driverClass" value="${jdbc.driverClass}" ></property>
	<property name="user" value="${jdbc.user}" ></property>
	<property name="password" value="${jdbc.password}" ></property>
</bean>
<!-- 2。核心事务管理让spring来管理事务 -->
<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
	<property name="sessionFactory" ref="sessionFactory"></property>
</bean>
<tx:annotation-driven transaction-manager="transactionManage"/>
<!-- 3。加载配置hibernate信息 -->
<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
	<!-- 将连接池注入到sessionFactory中，使其获得连接 -->
	<property name="dataSource" ref="dataSource"></property>
	<!-- 配置hibernate信息 -->
	<property name="hibernateProperties">
		<props>
			<prop key="hibernate.hbm2ddl.auto" >update</prop>
			<prop key="hibernate.dialect" >org.hibernate.dialect.MySQL5InnoDBDialect</prop>
			<prop key="hibernate.show_sql" >true</prop>
			<prop key="hibernate.format_sql" >true</prop>
		</props>
	</property>
	<!-- 引入orm元数据，读取hibernate映射配置文件 -->
	<property name="mappingDirectoryLocations" value="classpath:com/leo/crm/domain"></property>
</bean>
<!--4.配置Action -->
	<bean name="userAction" class="com.leo.crm.web.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	
	<!-- 创建对象UserService -->
	<bean name="userService" class="com.leo.crm.service.impl.UserServiceImpl">
		<!-- 引用数据层注入数据层 -->
		<property name="userDao" ref="userDao"></property>
	</bean>
	<!--创建操作数据层dao  -->
	<bean name="userDao" class="com.leo.crm.dao.impl.UserDaoImpl">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
<!-- customer -->
<bean name="customerAction" class="com.leo.crm.web.action.CustomerAction" scope="prototype">
		<property name="customerService" ref="customerService"></property>
	</bean>
	
	<!-- 创建对象CustomerService -->
	<bean name="customerService" class="com.leo.crm.service.impl.CustomerServiceImpl">
		<!-- 引用数据层注入数据层 -->
		<property name="customerDao" ref="customerDao"></property>
	</bean>
	<!--创建操作数据层dao  -->
	<bean name="customerDao" class="com.leo.crm.dao.impl.CustomerDaoImpl">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
<!-- baseDict -->
<bean name="baseDictAction" class="com.leo.crm.web.action.BaseDictAction" scope="prototype">
		<property name="baseDictService" ref="baseDictService"></property>
	</bean>
	
	<!-- 创建对象C-->
	<bean name="baseDictService" class="com.leo.crm.service.impl.BaseDictServiceImpl">
		<!-- 引用数据层注入数据层 -->
		<property name="baseDictDao" ref="baseDictDao"></property>
	</bean>
	<!--创建操作数据层dao  -->
	<bean name="baseDictDao" class="com.leo.crm.dao.impl.BaseDictDaoImpl">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
<!-- linkman -->
<bean name="linkManAction" class="com.leo.crm.web.action.LinkManAction" scope="prototype">
		<property name="linkManService" ref="linkManService"></property>
	</bean>	
	<!-- 创建对象C-->
	<bean name="linkManService" class="com.leo.crm.service.impl.LinkManServiceImpl">
		<!-- 引用数据层注入数据层 -->
		<property name="linkManDao" ref="linkManDao"></property>
	</bean>
	<!--创建操作数据层dao  -->
	<bean name="linkManDao" class="com.leo.crm.dao.impl.LinkManDaoImpl">
		<!-- 注入sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
<!-- cxf配置 -->
<!-- 引入CXF bean定义如下 早期的版本中使用
	<import resource="classpath:META-INF/cxf/cxf.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml"/> -->
	
	<!-- 注册服务  
	<url-pattern>/service/*</url-pattern>与下面访问的路径有关
	http://ip:port/projectName/service/address
	address对应的是下面的address的配置-->
	
	<jaxws:server id="customerServer" address="/customer">
		<jaxws:serviceBean>
			<ref bean="customerService"></ref>
		</jaxws:serviceBean>
	</jaxws:server>
</beans>