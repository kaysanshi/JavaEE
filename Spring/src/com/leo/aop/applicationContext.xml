<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">
	
<!--准备工作：导入aop约束的命名空间  -->
<!-- 1.配置目标对象 -->
	<bean name="userService" class="com.leo.service.impl.UserServiceImpl"></bean>
<!-- 2.配置通知对象 -->
	<bean name="Advice" class="com.leo.aop.Advice"></bean>
<!-- 3.配置通知织入目标对象 -->
	<aop:config>
		<!-- 配置切入点
			public void com.leo.service.UserServiceImpl.save()
				void com.leo.service.UserServiceImpl.save()
				*com.leo.service.UserServiceImpl.save()
				*com.leo.service.UserServiceImpl.*()
				
				*com.leo.service.*ServiceImpl.*(..)//任意的参数，后缀为ServiceImpl的类下任意的方法
				*com.leo.service..*ServiceImpl.*(..)
		 -->
		<aop:pointcut expression="execution(pubic void com.leo.service.UserServiceImpl.save())" id="pc"></aop:pointcut>
		<aop:aspect ref=" Advice">
			<!-- 指定为beafore方法作为前置通知 -->
			<aop:before method="before" pointcut-ref="pc"></aop:before>
			<!--后置 -->
			<aop:after-returning method="afterReturning" pointcut-ref="pc"></aop:after-returning>
			<!-- 环绕 -->
			<aop:around method="around" pointcut-ref="pc"></aop:around>
			<!-- 后置异常 -->
			<aop:after-throwing method="afterException" pointcut-ref="pc"></aop:after-throwing>
			<!-- 后置通知 -->
			<aop:after method="after" pointcut-ref="pc"></aop:after>
		</aop:aspect>
	</aop:config>	
</beans>